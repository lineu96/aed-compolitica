axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE )
p
#---
# library
#install.packages("waffle")
library(waffle)
# Create data
group <- c("group-1","group-2","group-3")
value <- c(13,5,22)
data <- data.frame(group,value)
waffle(data, rows = 5, colors = c("#fb5607", "#ff006e", "#8338ec"), legend_pos = "bottom")
#---
# Load the library
library(leaflet)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
200*12
160*12
rmarkdown::render_site()
rmarkdown::render_site()
?pie
dados <- read.csv("https://raw.githubusercontent.com/fernandomayer/data/master/milsa.csv")
names(dados) <- c("funcionario", "estado_civil",
"instrucao", "filhos", "salario",
"anos", "meses", "regiao")
head(dados)
names(dados)
dados$estado_civil
table(dados$estado_civil)
tabela1 <- table(dados$estado_civil)
tabela1
sum(tabela1)
prop.table(tabela1)
tabela2 <- prop.table(tabela1)
tabela2
sum(tabela2)
tabela2*100
tabela3 <- tabela2*100
tabela3
sum(tabela3)
plot(tabela1)
plot(tabela2)
plot(tabela3)
barplot(tabela1)
barplot(tabela2)
barplot(tabela3)
barplot(tabela1, horiz=T)
barplot(tabela2, horiz=T)
barplot(tabela3, horiz=T)
pie(tabela1)
pie(tabela2)
pie(tabela3)
tabela4 <- table(dados$estado_civil, rep(1,36))
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela4 <- table(dados$estado_civil, rep(NULL,36))
tabela4 <- table(dados$estado_civil, rep(1,36))
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela4 <- table(dados$estado_civil, rep(na,36))
tabela4 <- table(dados$estado_civil, rep(NA,36))
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela4 <- table(dados$estado_civil, rep(0,36))
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela4 <- table(dados$estado_civil, rep('0',36))
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela4 <- table(dados$estado_civil, rep('',36))
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela5 <- prop.table(tabela4)
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela6 = data.frame(estado_civil = names(tabela1),
freq = as.vector(tabela1),
freq_r = as.vector(tabela2))
tabela6
tabela6 = data.frame(estado_civil = names(tabela1),
freq = as.vector(tabela1),
freq_r = as.vector(tabela2))
tabela6
tabela6[3,1] <- "TOTAL"
tabela6[3,2] <- sum(tabela6$freq, na.rm = T)
tabela6[3,3] <- sum(tabela6$freq_r, na.rm = T)
tabela6
names(tabela6)
names(tabela6) <- c("Estado civil",
"Freq. absoluta",
"Freq. Relativa")
tabela6
dados$salario
breaks <- seq(4,24,2)
classes <- cut(dados$salario,
breaks = breaks,
include.lowest = TRUE,
right = FALSE)
table(classes)
tabela7 <- table(classes)
tabela7
sum(tabela7)
prop.table(tabela7)
tabela8 <- prop.table(tabela7)
tabela8
sum(tabela8)
tabela8*100
tabela9 <- tabela8*100
tabela9
sum(tabela9)
tabela7
barplot(tabela7, space = 0)
hist(dados$salario)
hist(dados$salario, probability = T)
densidade <- density(dados$salario)
plot(densidade)
hist(dados$salario, probability = T)
lines(densidade)
boxplot(dados$salario)
boxplot(dados$salario, horizontal = T)
tabela10 = data.frame(faixas= names(tabela7),
freq = as.vector(tabela7),
freq_r = as.vector(tabela8))
tabela10
tabela10[11,1] <- "TOTAL"
tabela10[11,2] <- sum(tabela10$freq, na.rm = T)
tabela10[11,3] <- sum(tabela10$freq_r, na.rm = T)
tabela10
names(tabela10)
names(tabela10) <- c("Faixas",
"Freq. absoluta",
"Freq. Relativa")
tabela10
dados$salario
sum(dados$salario)/length(dados$salario)
mean(dados$salario)
median(dados$salario)
quantile(dados$salario)
quantile(dados$salario, seq(0,1,0.1))
quantile(dados$salario)[4] - quantile(dados$salario)[1]
min(dados$salario)
max(dados$salario)
range(dados$salario)
max(dados$salario) - min(dados$salario)
diff(range(dados$salario))
dados$salario - mean(dados$salario)
dados$salario - median(dados$salario)
da_media <- abs(dados$salario - mean(dados$salario))
da_mediana <- abs(dados$salario - median(dados$salario))
mean(da_media)
mean(da_mediana)
var(dados$salario)
sqrt(var(dados$salario))
sd(dados$salario)
sd(dados$salario)/var(dados$salario)
(dados$salario - mean(dados$sal))/sd(dados$salario)
scale(dados$salario)
escore <- scale(dados$salario)
mean(escore)
sd(escore)
dados$instrucao
tabela <- table(dados$instrucao)
pi <- prop.table(tabela)
log_pi <- log(pi)
h1 <- -(sum(pi*log_pi))
h1
dados$estado_civil
dados$instrucao
table(dados$estado_civil, dados$instrucao)
table(dados$instrucao, dados$estado_civil)
tabela1 <- table(dados$estado_civil,
dados$instrucao)
tabela1
sum(tabela1)
addmargins(tabela1)
t(tabela1)
prop.table(tabela1)
tabela2 <- prop.table(tabela1)
tabela2
sum(tabela2)
addmargins(tabela2)
t(tabela2)
prop.table(tabela1, margin = 1)
tabela3 <- prop.table(tabela1, margin = 1)
tabela3
addmargins(tabela3)
t(tabela3)
prop.table(tabela1, margin = 2)
tabela4 <- prop.table(tabela1, margin = 2)
tabela4
addmargins(tabela4)
tabela1
barplot(tabela1, beside = F, legend.text = T)
barplot(t(tabela1), beside = F, legend.text = T)
barplot(tabela1, beside = T, legend.text = T)
barplot(t(tabela1), beside = T, legend.text = T)
barplot(t(tabela3), legend.text = T)
barplot(tabela4, legend.text = T)
tabela1
tabela1_margens <- addmargins(tabela1)
tabela1_margens
esperados <- (tabela1_margens[1:2,4] %*% t(tabela1_margens[3,1:3]))/sum(tabela1)
sum(((tabela1 - esperados)^2)/(esperados))
cor(dados$salario, dados$anos)
cor(dados$salario, dados$anos, method = "pearson")
cor(dados$salario, dados$anos, method = "spearman")
cor(dados$salario, dados$anos, method = "kendall")
plot(salario ~ anos, data = dados)
lm(salario ~ anos, data = dados)
coeficientes <- lm(salario ~ anos, data = dados)
abline(coeficientes, col = 2)
tapply(X = dados$salario,
INDEX = dados$instrucao,
FUN = mean)
tapply(X = dados$salario,
INDEX = dados$instrucao,
FUN = sd)
tapply(X = dados$salario,
INDEX = dados$instrucao,
FUN = summary)
boxplot(salario~instrucao, data = dados)
grau1 <- subset(dados, instrucao == "1o Grau")
grau2 <- subset(dados, instrucao == "2o Grau")
grau3 <- subset(dados, instrucao == "Superior")
par(mfrow = c(1,3))
hist(grau1$salario)
hist(grau2$salario)
hist(grau3$salario)
plot(density(grau1$salario))
plot(density(grau2$salario))
plot(density(grau3$salario))
par(mfrow = c(1,1))
plot(density(grau1$salario), xlim = c(0,30))
lines(density(grau2$salario), col= 2)
lines(density(grau3$salario), col = 4)
dados <- read.csv("https://raw.githubusercontent.com/fernandomayer/data/master/milsa.csv")
names(dados) <- c("funcionario", "estado_civil",
"instrucao", "filhos", "salario",
"anos", "meses", "regiao")
head(dados)
names(dados)
dados$estado_civil
table(dados$estado_civil)
tabela1 <- table(dados$estado_civil)
tabela1
sum(tabela1)
prop.table(tabela1)
tabela2 <- prop.table(tabela1)
tabela2
sum(tabela2)
tabela2*100
tabela3 <- tabela2*100
tabela3
sum(tabela3)
plot(tabela1)
plot(tabela2)
plot(tabela3)
barplot(tabela1)
barplot(tabela2)
barplot(tabela3)
barplot(tabela1, horiz=T)
barplot(tabela2, horiz=T)
barplot(tabela3, horiz=T)
pie(tabela1)
pie(tabela2)
pie(tabela3)
tabela4 <- table(dados$estado_civil, rep('',36))
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela5 <- prop.table(tabela4)
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela6 = data.frame(estado_civil = names(tabela1),
freq = as.vector(tabela1),
freq_r = as.vector(tabela2))
tabela6
tabela6[3,1] <- "TOTAL"
tabela6[3,2] <- sum(tabela6$freq, na.rm = T)
tabela6[3,3] <- sum(tabela6$freq_r, na.rm = T)
tabela6
names(tabela6)
names(tabela6) <- c("Estado civil",
"Freq. absoluta",
"Freq. Relativa")
tabela6
dados$salario
breaks <- seq(4,24,2)
classes <- cut(dados$salario,
breaks = breaks,
include.lowest = TRUE,
right = FALSE)
table(classes)
tabela7 <- table(classes)
tabela7
sum(tabela7)
prop.table(tabela7)
tabela8 <- prop.table(tabela7)
tabela8
sum(tabela8)
tabela8*100
tabela9 <- tabela8*100
tabela9
sum(tabela9)
tabela7
barplot(tabela7, space = 0)
hist(dados$salario)
hist(dados$salario, probability = T)
dados$estado_civil
table(dados$estado_civil)
tabela1 <- table(dados$estado_civil)
tabela1
sum(tabela1)
prop.table(tabela1)
tabela2 <- prop.table(tabela1)
tabela2
sum(tabela2)
tabela2*100
tabela3 <- tabela2*100
tabela3
sum(tabela3)
plot(tabela1)
plot(tabela2)
plot(tabela3)
barplot(tabela1)
barplot(tabela2)
barplot(tabela3)
barplot(tabela1, horiz=T)
barplot(tabela2, horiz=T)
barplot(tabela3, horiz=T)
pie(tabela1)
pie(tabela2)
pie(tabela3)
tabela4 <- table(dados$estado_civil, rep('',36))
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela5 <- prop.table(tabela4)
barplot(tabela4)
barplot(tabela4, horiz = T)
tabela6 = data.frame(estado_civil = names(tabela1),
freq = as.vector(tabela1),
freq_r = as.vector(tabela2))
tabela6
tabela6[3,1] <- "TOTAL"
tabela6[3,2] <- sum(tabela6$freq, na.rm = T)
tabela6[3,3] <- sum(tabela6$freq_r, na.rm = T)
tabela6
names(tabela6)
names(tabela6) <- c("Estado civil",
"Freq. absoluta",
"Freq. Relativa")
tabela6
dados$salario
dados$salario
breaks <- seq(4,24,2)
classes <- cut(dados$salario,
breaks = breaks,
include.lowest = TRUE,
right = FALSE)
table(classes)
tabela7 <- table(classes)
tabela7
sum(tabela7)
prop.table(tabela7)
tabela8 <- prop.table(tabela7)
tabela8
sum(tabela8)
tabela8*100
tabela9 <- tabela8*100
tabela9
sum(tabela9)
tabela7
barplot(tabela7, space = 0)
hist(dados$salario)
hist(dados$salario, probability = T)
densidade <- density(dados$salario)
plot(densidade)
hist(dados$salario, probability = T)
lines(densidade)
boxplot(dados$salario)
boxplot(dados$salario, horizontal = T)
tabela10 = data.frame(faixas= names(tabela7),
freq = as.vector(tabela7),
freq_r = as.vector(tabela8))
tabela10
tabela10[11,1] <- "TOTAL"
tabela10[11,2] <- sum(tabela10$freq, na.rm = T)
tabela10[11,3] <- sum(tabela10$freq_r, na.rm = T)
tabela10
names(tabela10)
names(tabela10) <- c("Faixas",
"Freq. absoluta",
"Freq. Relativa")
tabela10
dados$salario
dados$salario
sum(dados$salario)/length(dados$salario)
mean(dados$salario)
median(dados$salario)
quantile(dados$salario)
quantile(dados$salario, seq(0,1,0.1))
quantile(dados$salario)[4] - quantile(dados$salario)[1]
min(dados$salario)
max(dados$salario)
range(dados$salario)
max(dados$salario) - min(dados$salario)
diff(range(dados$salario))
dados$salario - mean(dados$salario)
dados$salario - median(dados$salario)
da_media <- abs(dados$salario - mean(dados$salario))
da_mediana <- abs(dados$salario - median(dados$salario))
mean(da_media)
mean(da_mediana)
var(dados$salario)
sqrt(var(dados$salario))
sd(dados$salario)
sd(dados$salario)/var(dados$salario)
(dados$salario - mean(dados$sal))/sd(dados$salario)
scale(dados$salario)
escore <- scale(dados$salario)
(dados$salario - mean(dados$sal))/sd(dados$salario)
scale(dados$salario)
escore <- scale(dados$salario)
mean(escore)
sd(escore)
barplot(tabela4) # Gráfico de barras (repetido, com a mesma observação anterior).
tabela5 <- prop.table(tabela4) # Calcula as proporções para 'tabela4'.
tabela5
barplot(tabela5) # Gráfico de barras (repetido, com a mesma observação anterior).
barplot(tabela5, horiz = T) # Gráfico de barras horizontal (repetido).
quantile(dados$salario)
barplot(tabela1, beside = F, legend.text = T) # Gráfico de barras empilhadas para 'tabela1' com legenda.
dados$estado_civil # Acessa a coluna 'estado_civil'.
dados$instrucao # Acessa a coluna 'instrucao'.
table(dados$estado_civil, dados$instrucao) # Tabela de contingência entre 'estado_civil' e 'instrucao'.
table(dados$instrucao, dados$estado_civil) # Tabela de contingência com as variáveis invertidas.
tabela1 <- table(dados$estado_civil,
dados$instrucao) # Armazena a tabela de contingência em 'tabela1'.
tabela1 # Exibe 'tabela1'.
sum(tabela1) # Soma total das observações na tabela de contingência.
addmargins(tabela1) # Adiciona somas de linha e coluna (margens) à 'tabela1'.
t(tabela1) # Transpõe a tabela (inverte linhas e colunas).
prop.table(tabela1) # Calcula as proporções em relação ao total geral da tabela.
tabela2 <- prop.table(tabela1) # Armazena as proporções gerais em 'tabela2'.
tabela2 # Exibe 'tabela2'.
sum(tabela2) # Soma as proporções para verificar o total (deve ser 1).
addmargins(tabela2) # Adiciona somas de linha e coluna às proporções gerais.
t(tabela2) # Transpõe a tabela de proporções gerais.
prop.table(tabela1, margin = 1) # Calcula as proporções por linha (soma de cada linha = 1).
tabela3 <- prop.table(tabela1, margin = 1) # Armazena as proporções por linha em 'tabela3'.
tabela3 # Exibe 'tabela3'.
addmargins(tabela3) # Adiciona somas de linha e coluna (as somas das linhas serão 1).
t(tabela3) # Transpõe a tabela de proporções por linha.
prop.table(tabela1, margin = 2) # Calcula as proporções por coluna (soma de cada coluna = 1).
tabela4 <- prop.table(tabela1, margin = 2) # Armazena as proporções por coluna em 'tabela4'.
tabela4 # Exibe 'tabela4'.
addmargins(tabela4) # Adiciona somas de linha e coluna (as somas das colunas serão 1).
tabela1 # Exibe a tabela de contingência original.
barplot(tabela1, beside = F, legend.text = T) # Gráfico de barras empilhadas para 'tabela1' com legenda.
barplot(t(tabela1), beside = F, legend.text = T) # Gráfico de barras empilhadas com a tabela transposta.
barplot(tabela1, beside = T, legend.text = T) # Gráfico de barras agrupadas para 'tabela1' com legenda.
barplot(t(tabela1), beside = T, legend.text = T) # Gráfico de barras agrupadas com a tabela transposta.
barplot(t(tabela3), legend.text = T) # Gráfico de barras para proporções por linha (transposto para melhor visualização).
barplot(tabela4, legend.text = T) # Gráfico de barras para proporções por coluna.
tabela1 # Exibe a tabela de contingência original.
tabela1_margens <- addmargins(tabela1) # Tabela de contingência com as somas marginais.
tabela1_margens # Exibe a tabela com as margens.
# Calcula as frequências esperadas para o teste Qui-quadrado de independência.
# (linha total * coluna total) / total geral
esperados <- (tabela1_margens[1:2,4] %*% t(tabela1_margens[3,1:3]))/sum(tabela1)
# Calcula as frequências esperadas para o teste Qui-quadrado de independência.
# (linha total * coluna total) / total geral
esperados <- (tabela1_margens[1:2,4] %*% t(tabela1_margens[3,1:3]))/sum(tabela1)
# Calcula a estatística Qui-quadrado (soma do quadrado da diferença entre observado e esperado, dividido pelo esperado).
sum(((tabela1 - esperados)^2)/(esperados)) # Não é o teste qui-quadrado completo, mas o cálculo da estatística.
cor(dados$salario, dados$anos) # Calcula a correlação de Pearson entre 'salario' e 'anos' (padrão).
cor(dados$salario, dados$anos, method = "pearson") # Especifica o método de Pearson para correlação linear.
cor(dados$salario, dados$anos, method = "spearman") # Calcula a correlação de Spearman (não-paramétrica, baseada em ranks).
cor(dados$salario, dados$anos, method = "kendall") # Calcula a correlação de Kendall (não-paramétrica, baseada em concordância/discordância).
plot(salario ~ anos, data = dados) # Cria um gráfico de dispersão de 'salario' em função de 'anos'.
# Aplica uma função (FUN) a subconjuntos de um vetor (X), definidos por um fator (INDEX).
tapply(X = dados$salario, # Variável quantitativa de interesse.
INDEX = dados$instrucao, # Variável categórica para agrupar os dados.
FUN = mean) # Calcula a média do salário para cada nível de 'instrucao'.
tapply(X = dados$salario,
INDEX = dados$instrucao,
FUN = sd) # Calcula o desvio padrão do salário para cada nível de 'instrucao'.
boxplot(salario~instrucao, data = dados) # Gera boxplots comparativos do salário por nível de instrução.
grau1 <- subset(dados, instrucao == "1o Grau") # Cria um subconjunto de dados para '1o Grau'.
grau2 <- subset(dados, instrucao == "2o Grau") # Cria um subconjunto de dados para '2o Grau'.
grau3 <- subset(dados, instrucao == "Superior") # Cria um subconjunto de dados para 'Superior'.
par(mfrow = c(1,3)) # Define o layout da área de plotagem para 1 linha e 3 colunas.
hist(grau1$salario) # Histograma do salário para o grupo "1o Grau".
hist(grau2$salario) # Histograma do salário para o grupo "2o Grau".
hist(grau3$salario) # Histograma do salário para o grupo "Superior".
plot(density(grau1$salario)) # Plota a curva de densidade do salário para "1o Grau".
plot(density(grau2$salario)) # Plota a curva de densidade do salário para "2o Grau".
plot(density(grau3$salario)) # Plota a curva de densidade do salário para "Superior".
par(mfrow = c(1,1)) # Reseta o layout da área de plotagem para uma única figura.
plot(density(grau1$salario), xlim = c(0,30)) # Plota a densidade do "1o Grau" com limites x definidos.
lines(density(grau2$salario), col= 2) # Adiciona a densidade do "2o Grau" (em vermelho) ao gráfico existente.
lines(density(grau3$salario), col = 4) # Adiciona a densidade do "Superior" (em azul) ao gráfico existente.
rmarkdown::render_site()
rmarkdown::render_site()
# Leitura dos dados
dados <- read.csv("https://raw.githubusercontent.com/fernandomayer/data/master/milsa.csv") # Carrega o conjunto de dados "milsa.csv" diretamente de uma URL.
rmarkdown::render_site()
